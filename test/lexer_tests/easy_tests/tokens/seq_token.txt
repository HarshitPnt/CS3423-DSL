punctuation: <!--
comment:  Testing with Composite Data Types 
punctuation: --!>
punctuation: <!--
comment:  Strings 
punctuation: --!>
datatype: string
identifier: _test_identifier123
punctuation: ;
identifier: _test_identifier123
operator: =
string_const: "\"Test Strin\"g 12@#412^&\""
punctuation: ;
datatype: char
identifier: a
operator: =
identifier: _test_identifier123
punctuation: [
int_const: 1
punctuation: ]
punctuation: ;
punctuation: <!--
comment:  Sets 
punctuation: --!>
datatype: o_set
operator: <
datatype: int_8
operator: >
identifier: a
punctuation: ;
datatype: u_set
operator: <
datatype: float_64
operator: >
identifier: b
operator: =
punctuation: {
int_const: 1
punctuation: ,
int_const: 2
punctuation: ,
int_const: 3
punctuation: ,
int_const: 4
punctuation: }
punctuation: ;
punctuation: <!--
comment:  Structs 
punctuation: --!>
identifier: struct
identifier: Point
punctuation: {
datatype: int_8
identifier: x
punctuation: ;
datatype: int_8
identifier: y
punctuation: ;
datatype: float_64
identifier: z
punctuation: ;
datatype: string
identifier: name
punctuation: ;
punctuation: }
punctuation: ;
identifier: struct
identifier: Points
punctuation: {
datatype: o_set
operator: <
identifier: Point
operator: >
identifier: coords
punctuation: ;
punctuation: }
punctuation: ;
punctuation: <!--
comment:  Regular Expressions 
punctuation: --!>
datatype: regex
identifier: alphabet
operator: =
regex: r
punctuation: '
regex_lit: [
regex_lit: a
regex_lit: -
regex_lit: z
regex_lit: ]
punctuation: '
punctuation: ;
datatype: regex
identifier: Letter
operator: =
regex: r
punctuation: '
regex_lit: {
regex_lit: a
regex_lit: l
regex_lit: p
regex_lit: h
regex_lit: a
regex_lit: b
regex_lit: e
regex_lit: t
regex_lit: }
punctuation: '
punctuation: ;
datatype: regex
identifier: Digit
operator: =
regex: r
punctuation: '
regex_lit: [
regex_lit: 0
regex_lit: -
regex_lit: 9
regex_lit: ]
punctuation: '
punctuation: ;
datatype: regex
identifier: _1
operator: =
regex: r
punctuation: '
regex_lit: [
regex_lit: a
regex_lit: b
regex_lit: ]
regex_lit: {
regex_lit: 2
regex_lit: }
punctuation: '
punctuation: ;
datatype: regex
identifier: _2
operator: =
regex: r
punctuation: '
regex_lit: {
regex_lit: a
regex_lit: }
regex_lit: *
punctuation: '
punctuation: ;
datatype: regex
identifier: _3
operator: =
regex: r
punctuation: '
regex_lit: (
regex_lit: a
regex_lit: b
regex_lit: )
regex_lit: +
punctuation: '
punctuation: ;
datatype: regex
identifier: _4
operator: =
regex: r
punctuation: '
regex_lit: ^
regex_lit: [
regex_lit: a
regex_lit: b
regex_lit: ]
punctuation: '
punctuation: ;
datatype: regex
identifier: _4
operator: =
regex: r
punctuation: '
regex_lit: *
regex_lit: {
regex_lit: a
regex_lit: }
regex_lit: $
punctuation: '
punctuation: ;
datatype: regex
identifier: _5
operator: =
regex: r
punctuation: '
regex_lit: {
regex_lit: a
regex_lit: }
regex_lit: |
regex_lit: (
regex_lit: b
regex_lit: )
regex_lit: *
punctuation: '
punctuation: ;
datatype: regex
identifier: _6
operator: =
regex: r
punctuation: '
regex_lit: \
regex_lit: (
regex_lit: a
regex_lit: b
regex_lit: \
regex_lit: )
punctuation: '
punctuation: ;
datatype: regex
identifier: _7
operator: =
regex: r
punctuation: '
regex_lit: (
regex_lit: a
regex_lit: )
regex_lit: ?
punctuation: '
punctuation: ;
punctuation: <!--
comment:  Context Free Grammars 
punctuation: --!>
datatype: cfg
identifier: a
punctuation: ;
identifier: a
punctuation: .
identifier: T
operator: =
punctuation: {
identifier: a
punctuation: :
string_const: "a"
punctuation: ,
identifier: demo
punctuation: :
string_const: "b"
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: N
operator: =
punctuation: {
identifier: A
punctuation: ,
identifier: B
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: S
operator: =
identifier: A
punctuation: ;
identifier: a
punctuation: .
identifier: P
operator: =
punctuation: {
identifier: A
punctuation: ->
operator: <
identifier: a
operator: >
identifier: B
punctuation: ,
identifier: B
punctuation: ->
operator: <
identifier: demo
operator: >
identifier: A
punctuation: ,
identifier: A
punctuation: ->
punctuation: {
operator: <
identifier: a
operator: >
identifier: A
punctuation: ,
epsilon: \e
punctuation: }
punctuation: }
punctuation: ;
punctuation: <!--
comment:  DFA 
punctuation: --!>
datatype: dfa
identifier: a
punctuation: ;
identifier: a
punctuation: .
identifier: Q
operator: =
punctuation: {
identifier: q0
punctuation: ,
identifier: q1
punctuation: ,
identifier: q2
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: Sigma
operator: =
punctuation: {
int_const: 0
punctuation: ,
int_const: 1
punctuation: ,
int_const: 2
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: delta
operator: =
punctuation: {
identifier: q0
punctuation: ,
int_const: 0
punctuation: ->
identifier: q1
punctuation: ,
identifier: a
punctuation: .
identifier: Q
punctuation: [
int_const: 0
punctuation: ]
punctuation: ,
int_const: 1
punctuation: ->
identifier: a
punctuation: .
identifier: Q
punctuation: [
int_const: 1
punctuation: ]
punctuation: ,
identifier: q1
punctuation: ,
regex: r
punctuation: '
regex_lit: [
regex_lit: 1
regex_lit: 2
regex_lit: ]
punctuation: '
punctuation: ->
identifier: q2
punctuation: ,
identifier: q2
punctuation: ,
punctuation: {
int_const: 0
punctuation: ,
int_const: 2
punctuation: }
punctuation: ->
identifier: q1
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: q0
operator: =
identifier: q0
punctuation: ;
identifier: a
punctuation: .
identifier: F
operator: =
punctuation: {
identifier: q1
punctuation: ,
identifier: q2
punctuation: }
punctuation: ;
punctuation: <!--
comment:  NFA 
punctuation: --!>
datatype: nfa
identifier: a
punctuation: ;
identifier: a
punctuation: .
identifier: Q
operator: =
punctuation: {
identifier: q0
punctuation: ,
identifier: q1
punctuation: ,
identifier: q2
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: Sigma
operator: =
punctuation: {
int_const: 0
punctuation: ,
int_const: 1
punctuation: ,
int_const: 2
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: delta
operator: =
punctuation: {
identifier: q0
punctuation: ,
int_const: 0
punctuation: ->
punctuation: {
identifier: q1
punctuation: ,
identifier: q2
punctuation: }
punctuation: ,
identifier: a
punctuation: .
identifier: Q
punctuation: [
int_const: 0
punctuation: ]
punctuation: ,
int_const: 1
punctuation: ->
identifier: a
punctuation: .
identifier: Q
punctuation: [
int_const: 1
punctuation: ]
punctuation: ,
identifier: q1
punctuation: ,
regex: r
punctuation: '
regex_lit: [
regex_lit: 1
regex_lit: 2
regex_lit: ]
punctuation: '
punctuation: ->
identifier: q2
punctuation: ,
identifier: q2
punctuation: ,
punctuation: {
int_const: 0
punctuation: ,
int_const: 2
punctuation: }
punctuation: ->
identifier: q1
punctuation: ,
identifier: q2
punctuation: ,
epsilon: \e
punctuation: ->
identifier: q0
punctuation: }
identifier: a
punctuation: .
identifier: q0
operator: =
identifier: q0
punctuation: ;
identifier: a
punctuation: .
identifier: F
operator: =
punctuation: {
identifier: q1
punctuation: ,
identifier: q2
punctuation: }
punctuation: ;
punctuation: <!--
comment:  PDA 
punctuation: --!>
datatype: pda
identifier: a
punctuation: ;
identifier: a
punctuation: .
identifier: Q
operator: =
punctuation: {
identifier: A
punctuation: ,
identifier: B
punctuation: ,
identifier: C
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: S
operator: =
punctuation: {
identifier: a
punctuation: ,
identifier: b
punctuation: ,
identifier: c
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: G
operator: =
punctuation: {
identifier: a
punctuation: ,
identifier: b
punctuation: ,
identifier: d
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: delta
operator: =
punctuation: {
identifier: A
punctuation: ,
identifier: a
punctuation: ,
identifier: a
punctuation: ->
identifier: A
punctuation: ,
identifier: a
punctuation: ,
identifier: A
punctuation: ,
punctuation: {
punctuation: (
identifier: b
punctuation: ,
identifier: a
punctuation: )
punctuation: ,
punctuation: (
identifier: b
punctuation: ,
identifier: c
punctuation: )
punctuation: }
punctuation: ->
punctuation: {
punctuation: (
identifier: B
punctuation: ,
identifier: a
punctuation: )
punctuation: ,
punctuation: (
identifier: A
punctuation: ,
identifier: d
punctuation: )
punctuation: }
punctuation: ,
identifier: B
punctuation: ,
punctuation: {
punctuation: (
identifier: b
punctuation: ,
identifier: a
punctuation: )
punctuation: ,
punctuation: (
identifier: b
punctuation: ,
identifier: c
punctuation: )
punctuation: }
punctuation: ->
identifier: B
punctuation: ,
identifier: a
punctuation: ,
identifier: B
punctuation: ,
identifier: c
punctuation: ,
identifier: a
punctuation: ->
identifier: C
punctuation: ,
epsilon: \e
punctuation: ,
identifier: C
punctuation: ,
identifier: c
punctuation: ,
identifier: a
punctuation: ->
punctuation: {
punctuation: (
identifier: C
punctuation: ,
epsilon: \e
punctuation: )
punctuation: ,
punctuation: (
identifier: C
punctuation: ,
identifier: a
punctuation: )
punctuation: }
punctuation: }
punctuation: ;
identifier: a
punctuation: .
identifier: q0
operator: =
identifier: A
punctuation: ;
identifier: a
punctuation: .
identifier: F
operator: =
punctuation: {
identifier: C
punctuation: }
punctuation: ;
